#!/bin/bash

if [[ "$1" == "--help" ]]; then
    echo ""
    echo "Program:        streamBpB"
    echo "Version:        1.0.0"
    echo "Code:           https://github.com/yh1126611/streamBpB"
    echo ""
    echo "Description:"
    echo "Calculate the content of consecutive DNA bases (0-1) defined by user-"
    echo "input sequence for every window inside interval from set of coordinates"
    echo "on genome."
    echo ""
    echo "Usage:"
    echo "streambpb -b <BASE> [OPTIONS] <genome.fasta> <coordinates.txt> <out.tsv>"
    echo ""
    echo "<coordinates.txt>       Three-column tab-delimited file of coordinates"
    echo "                        to analyze pattern frequency in vicinity of."
    echo "                        Column 1: chromosome; column 2: genomic"
    echo "                        coordinate; column 3: strand orientation (+|-)"
    echo ""
    echo "Required:"
    echo "-b, --base      STRING  Sequence to find percentage of (e.g. CG) (Non-"
    echo "                        case-sensitive)"
    echo ""
    echo "Optional:"
    echo "-i, --interval  INT     Furthest distance from coordinate to be"
    echo "                        analyzed (bp) [Default 10,000]"
    echo "-w, --window    INT     Size of each window inside interval (bp)"
    echo "                        [Default 100]"
    echo ""
    exit 0
fi

# Initialize defaults
window_size=100
interval_size=10000
b_string=""

# Manual option parsing to handle both short and long options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -b|--base)
            b_string="$2"
            shift 2
            ;;
        -w|--window)
            window_size="$2"
            shift 2
            ;;
        -i|--interval)
            interval_size="$2"
            shift 2
            ;;
        -*)
            echo "Invalid option: $1" >&2
            exit 1
            ;;
        *)
            # Break when non-option arguments are found
            break
            ;;
    esac
done

# Check mandatory -b/--base
if [ -z "$b_string" ]; then
    echo "Error: Option -b/--base is required" >&2
    exit 1
fi

# Check if interval is bigger than window
if [ "$interval_size" -le "$window_size" ]; then
    echo "Error: Interval size ($interval_size) must be larger than window size ($window_size)" >&2
    exit 1
fi

# Check remaining positional arguments
if [ $# -ne 3 ]; then
    echo "Usage: streambpb -b <BASE> [OPTIONS] <genome.fasta> <coordinates.txt> <out.tsv>"
    exit 1
fi

# Assign remaining positional arguments
genome_file="$1"
coord_file="$2"
output_file="$3"

# Ensure samtools is installed
if ! command -v samtools &> /dev/null; then
    echo "Error: samtools is not installed or not in PATH."
    exit 1
fi

# Generate FASTA index if missing
if [ ! -e "${genome_file}.fai" ]; then
    samtools faidx $genome_file
fi

# Load chromosome lengths into an associative array
declare -A chr_lengths
while read -r chrom len _; do
    chr_lengths[$chrom]=$len
done < "${genome_file}.fai"

calculate_pattern_frequency() {
    # Check for two input arguments: sequence and pattern
    if [ $# -ne 2 ]; then
        echo "Usage: calculate_pattern_frequency <sequence> <pattern>" >&2
        return 1
    fi

    local seq=$(echo "$1" | tr '[:lower:]' '[:upper:]')         # Convert sequence to uppercase
    local pattern=$(echo "$2" | tr '[:lower:]' '[:upper:]')     # Convert pattern to uppercase
    local pattern_length=${#pattern}
    local seq_length=${#seq}

    # Edge case: empty pattern
    if [ $pattern_length -eq 0 ]; then
        echo "Error: Pattern cannot be empty." >&2
        return 1
    fi

    # Edge case: pattern longer than sequence
    if [ $seq_length -lt $pattern_length ]; then
        echo "0.00"
        return 0
    fi

    # Track unique positions of letters involved in matches
    local -A unique_positions=()  # Associative array to store unique letter indices

    for ((i = 0; i <= seq_length - pattern_length; i++)); do
        # Check if substring starting at position `i` matches the pattern
        if [[ "${seq:i:pattern_length}" == "$pattern" ]]; then
            # Add all positions of this match to unique_positions
            for ((j = i; j < i + pattern_length; j++)); do
                unique_positions[$j]=1  # Mark position as part of a match
            done
        fi
    done

    # Calculate the total number of unique letters in matches (size of unique_positions)
    local unique_letter_count=${#unique_positions[@]}

    # Calculate frequency as (unique_letter_count / seq_length)
    echo "scale=2; $unique_letter_count / $seq_length" | bc
}

# Create header for output file
echo -e "Chromosome_Coordinate\tDistance\tRatio\tStrand" > $output_file

# Process each entry in the coordinate file
while IFS=$'\t' read -r chrom coord strand; do
    
    # Skip unknown chromosomes (not in genome index)
    chrom_len=${chr_lengths[$chrom]}
    if [ -z "$chrom_len" ]; then
        echo "Warning: Chromosome '$chrom' not found in genome index. Skipping..."
        continue
    fi

    # Calculate the interval boundaries
    interval_start=$((coord - interval_size))
    interval_end=$((coord + interval_size))

    # Adjust interval to fit within chromosome boundaries
    interval_start=$((interval_start < 1 ? 1 : interval_start))
    interval_end=$((interval_end > chrom_len ? chrom_len : interval_end))

    # Loop through windows within the interval
    for start in $(seq $interval_start $window_size $((interval_end - window_size + 1))); do
        end=$((start + window_size - 1))
        
        # Skip if window is not fully within the interval and chromosome range
        if (( start < interval_start || end > interval_end || start < 1 || end > chrom_len )); then
            continue
        fi
        
        # Calculate distance from the coordinate
        distance=$((start - coord))
        
        # Extract sequence using samtools faidx and remove headers/newlines
        seq=$(samtools faidx "$genome_file" "${chrom}:${start}-${end}" | tail -n +2 | tr -d '\n')
        
        # Calculate content for the sequence and output results
        pattern_ratio=$(calculate_pattern_frequency "$seq" "$b_string")
        echo -e "${chrom}_${coord}\t${distance}\t${pattern_ratio}\t${strand}" >> "$output_file"
    done
    
done < "$coord_file"

echo "Analysis complete. Results saved in $output_file"
