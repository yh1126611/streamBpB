#!/bin/bash

# Print help message if --help is called
if [[ "$1" == "--help" ]]; then
    echo "Program: streamBpB"
    echo "Version: 1.0.0"
    echo "Code:    https://github.com/yh1126611/streamBpB"
    echo "Usage:   streamgc -b <base_sequence> <genome.fasta> <coordinates.txt> <out.tsv>"
    echo ""
    echo "Calculate the content of consecutive DNA bases (0-1) defined by user-input sequence for every 100 bp window inside 10,000 bp interval from set of coordinates on genome."
    echo "<coordinates.txt>: a three-column tab-delimited file. Column 1: chromosome; column 2: genomic coordinate; column 3: strand orientation (+|-)"
    echo ""
    echo "Required arguments:"
    echo "-b       STRING    Input sequence of bases user wishes to find percentage of in genome (e.g. CG) (Non-case-sensitive)"
    exit 0
fi

# My way is the only correct way
if [ $# -ne 5 ]; then
    echo "Usage: streamgc -b <base_sequence> <genome.fasta> <coordinates.txt> <output.tsv>"
    exit 1
fi

# Initialize variables
b_string=""  # Placeholder for -b option (mandatory)

# Parse optional arguments using getopts
while getopts ":b:" opt; do
    case $opt in
        b)
            b_string="$OPTARG"  # Set the value of -b option
            ;;
        \?)
            echo "Error: Invalid option -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Error: Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# Shift processed options so that positional arguments are correctly handled
shift $((OPTIND - 1))

# Check if the mandatory -b option was provided
if [ -z "$b_string" ]; then
    echo "Error: Option -b requires an argument." >&2
    exit 1
fi

# Assign positional arguments to variables
genome_file="$1"
coord_file="$2"
output_file="$3"

# Ensure samtools is installed
if ! command -v samtools &> /dev/null; then
    echo "Error: samtools is not installed or not in PATH."
    exit 1
fi

# Generate FASTA index if missing
if [ ! -e "${genome_file}.fai" ]; then
    samtools faidx $genome_file
fi

# Load chromosome lengths into an associative array
declare -A chr_lengths
while read -r chrom len _; do
    chr_lengths[$chrom]=$len
done < "${genome_file}.fai"

calculate_pattern_frequency() {
    # Check for two input arguments: sequence and pattern
    if [ $# -ne 2 ]; then
        echo "Usage: calculate_pattern_frequency <sequence> <pattern>" >&2
        return 1
    fi

    local seq=$(echo "$1" | tr '[:lower:]' '[:upper:]')         # Convert sequence to uppercase
    local pattern=$(echo "$2" | tr '[:lower:]' '[:upper:]')     # Convert pattern to uppercase
    local pattern_length=${#pattern}
    local seq_length=${#seq}

    # Edge case: empty pattern
    if [ $pattern_length -eq 0 ]; then
        echo "Error: Pattern cannot be empty." >&2
        return 1
    fi

    # Edge case: pattern longer than sequence
    if [ $seq_length -lt $pattern_length ]; then
        echo "0.00"
        return 0
    fi

    # Track unique positions of letters involved in matches
    local -A unique_positions=()  # Associative array to store unique letter indices

    for ((i = 0; i <= seq_length - pattern_length; i++)); do
        # Check if substring starting at position `i` matches the pattern
        if [[ "${seq:i:pattern_length}" == "$pattern" ]]; then
            # Add all positions of this match to unique_positions
            for ((j = i; j < i + pattern_length; j++)); do
                unique_positions[$j]=1  # Mark position as part of a match
            done
        fi
    done

    # Calculate the total number of unique letters in matches (size of unique_positions)
    local unique_letter_count=${#unique_positions[@]}

    # Calculate frequency as (unique_letter_count / seq_length)
    echo "scale=2; $unique_letter_count / $seq_length" | bc
}

# Create header for output file
echo -e "Chromosome_Coordinate\tDistance\tRatio\tStrand" > $output_file

# Process each entry in the coordinate file
while IFS=$'\t' read -r chrom coord strand; do
    
    # Skip unknown chromosomes (not in genome index)
    chrom_len=${chr_lengths[$chrom]}
    if [ -z "$chrom_len" ]; then
        echo "Warning: Chromosome '$chrom' not found in genome index. Skipping..."
        continue
    fi

    # Loop through distances from -10,000 to +10,000 in steps of 100 bp
    for distance in $(seq -10000 100 10000); do
        
        # Calculate start and end positions of the window
        start=$((coord + distance))
        end=$((start + 99))
        
        # Skip windows that fall outside chromosome boundaries
        if (( start < 1 || end > chrom_len )); then
            continue
        fi
        
        # Extract sequence using samtools faidx and remove headers/newlines
        seq=$(samtools faidx "$genome_file" "${chrom}:${start}-${end}" | tail -n +2 | tr -d '\n')
        
        # Calculate GC content for the sequence and output results if valid sequence exists
        pattern_ratio=$(calculate_pattern_frequency "$seq" "$b_string")
        echo -e "${chrom}_${coord}\t${distance}\t${pattern_ratio}\t${strand}" >> "$output_file"
        
    done
    
done < "$coord_file"

echo "Analysis complete. Results saved in $output_file"
